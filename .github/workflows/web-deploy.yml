name: Build and Deploy FastAPI to Azure VM

on:
  push:
    branches:
      - gpu-main-test
    paths:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t fastapi_app:latest ./app

      - name: Create deployment archive (.tar.gz)
        run: |
          tar --exclude='.env' \
              --exclude='app/.env' \
              -czf release.tar.gz app dialogue fish-speech nginx docker-compose.yml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-artifact
          path: release.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi-artifact

      - name: Copy archive to Azure VM via SCP
        run: |
          echo "${{ secrets.SSH_KEY }}" > private_key
          chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no release.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/release.tar.gz

      - name: SSH and deploy on Azure VM
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            

            # 🔁 기존 컨테이너 강제 종료 및 제거 (모든 서비스 포함)
            docker rm -f postgres_db || true
            docker rm -f fastapi_app || true
            docker rm -f nginx_proxy || true
            docker rm -f fish-speech || true
            docker rm -f dialogue || true
            docker system prune -f || true

            # 🔁 새 디렉토리 준비
            rm -rf ~/fastapi_deploy_temp
            mkdir -p ~/fastapi_deploy_temp
            tar -xzf ~/release.tar.gz -C ~/fastapi_deploy_temp

            # .env를 복사
            cp ~/.env ~/fastapi_deploy_temp/.env
            mkdir -p ~/fastapi_deploy_temp/dialogue
            cp ~/dialogue.env ~/fastapi_deploy_temp/dialogue/.env

            cd ~/fastapi_deploy_temp
            docker-compose up -d --build
          EOF
